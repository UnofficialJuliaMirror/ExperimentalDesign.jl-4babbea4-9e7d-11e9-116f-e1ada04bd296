var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#API-Documentation-1","page":"Internals","title":"API Documentation","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Documentation for ExperimentalDesign.jl's API.","category":"page"},{"location":"lib/internals/#Contents-1","page":"Internals","title":"Contents","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#Index-1","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#API-1","page":"Internals","title":"API","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Modules = [ExperimentalDesign]\nPublic = false","category":"page"},{"location":"lib/internals/#ExperimentalDesign.expand_grid-Tuple{Int64,Int64}","page":"Internals","title":"ExperimentalDesign.expand_grid","text":"expand_grid(factors::Int64, levels::Int64) -> Array{Float64,2}\n\n\nGenerates all combinations of factors factors with levels levels.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#ExperimentalDesign.linear_model-Tuple{DataFrames.DataFrame}","page":"Internals","title":"ExperimentalDesign.linear_model","text":"linear_model(data::DataFrames.DataFrame) -> StatsModels.FormulaTerm{StatsModels.Term,_1} where _1\n\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#ExperimentalDesign.measure_optimize_design-Tuple{Any}","page":"Internals","title":"ExperimentalDesign.measure_optimize_design","text":"measure_optimize_design(levels::Any) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#ExperimentalDesign.measure_optimize_design_refresh-Tuple{Any}","page":"Internals","title":"ExperimentalDesign.measure_optimize_design_refresh","text":"measure_optimize_design_refresh(refresh_candidate_set::Any) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#ExperimentalDesign.primes_divisible_offset-Tuple{Int64,Int64,Int64}","page":"Internals","title":"ExperimentalDesign.primes_divisible_offset","text":"primes_divisible_offset(factor::Int64, offset::Int64, max_prime::Int64) -> Array{Int64,1}\n\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#ExperimentalDesign.variance_prediction!-Tuple{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,1},Array{Float64,2},Array{Float64,2}}","page":"Internals","title":"ExperimentalDesign.variance_prediction!","text":"variance_prediction!(dispersion_matrix::Array{Float64,2}, model_matrix::Array{Float64,2}, candidate_set::Array{Float64,2}, design_variance::Array{Float64,1}, candidate_variance::Array{Float64,1}, predictions::Array{Float64,2}, deltas::Array{Float64,2})\n\n\nComputes deltas for  the exchanges between all pairs  made between experiments in model_matrix  and experiments in candidate_set.   The dispersion_matrix array   must   contain  the   dispersion   matrix   for  model_matrix.    Both model_matrix  and   candidate_set  must  be  model   matrices.   The  arrays design_variance,  candidate_variance,  predictions  and deltas  will  be overwritten.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#API-Documentation-1","page":"Public","title":"API Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for ExperimentalDesign.jl's API.","category":"page"},{"location":"lib/public/#Contents-1","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#API-1","page":"Public","title":"API","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Modules = [ExperimentalDesign]\nPrivate = false","category":"page"},{"location":"lib/public/#ExperimentalDesign.AbstractDesign","page":"Public","title":"ExperimentalDesign.AbstractDesign","text":"abstract type AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractFactorialDesign","page":"Public","title":"ExperimentalDesign.AbstractFactorialDesign","text":"abstract type AbstractFactorialDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractOptimalDesign","page":"Public","title":"ExperimentalDesign.AbstractOptimalDesign","text":"abstract type AbstractOptimalDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractScreeningDesign","page":"Public","title":"ExperimentalDesign.AbstractScreeningDesign","text":"abstract type AbstractScreeningDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FractionalFactorial","page":"Public","title":"ExperimentalDesign.FractionalFactorial","text":"struct FractionalFactorial <: AbstractFactorialDesign\n\nmatrix::Array{Float64,2}\nresponse::Union{Missing, Array{Float64,1}}\nformula::Union{Missing, FormulaTerm}\naliases::Union{Missing, FormulaTerm}\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FullFactorial","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"struct FullFactorial <: AbstractFactorialDesign\n\nmatrix::Union{Missing, DataFrame}\niterator::Base.Iterators.ProductIterator\nfactors::NamedTuple\nformula::StatsModels.FormulaTerm\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{NamedTuple,StatsModels.FormulaTerm}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::NamedTuple, formula::StatsModels.FormulaTerm; explicit) -> FullFactorial\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{NamedTuple}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::NamedTuple; explicit) -> FullFactorial\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::Tuple; explicit) -> FullFactorial\n\n\njulia> FullFactorial(([1, 2, 4], [:a, :b], [1.0, -1.0]), explicit = true)\nFullFactorial(12×3 DataFrames.DataFrame\n│ Row │ factor1 │ factor2 │ factor3 │\n│     │ Any     │ Any     │ Any     │\n├─────┼─────────┼─────────┼─────────┤\n│ 1   │ 1       │ a       │ 1.0     │\n│ 2   │ 2       │ a       │ 1.0     │\n│ 3   │ 4       │ a       │ 1.0     │\n│ 4   │ 1       │ b       │ 1.0     │\n│ 5   │ 2       │ b       │ 1.0     │\n│ 6   │ 4       │ b       │ 1.0     │\n│ 7   │ 1       │ a       │ -1.0    │\n│ 8   │ 2       │ a       │ -1.0    │\n│ 9   │ 4       │ a       │ -1.0    │\n│ 10  │ 1       │ b       │ -1.0    │\n│ 11  │ 2       │ b       │ -1.0    │\n│ 12  │ 4       │ b       │ -1.0    │, Base.Iterators.ProductIterator{Tuple{Array{Int64,1},Array{Symbol,1},Array{Float64,1}}}(([1, 2, 4], Symbol[:a, :b], [1.0, -1.0])), (factor1 = [1, 2, 4], factor2 = Symbol[:a, :b], factor3 = [1.0, -1.0]), response ~ factor1 + factor2 + factor3)\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.Optimal","page":"Public","title":"ExperimentalDesign.Optimal","text":"struct Optimal <: AbstractOptimalDesign\n\nmatrix::Array{Float64,2}\nresponse::Union{Missing, Array{Float64,1}}\nformula::Union{Missing, FormulaTerm}\noptimality::Union{Missing, NamedTuple}\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"struct PlackettBurman <: AbstractScreeningDesign\n\nmatrix::DataFrames.DataFrame\nfactors::Tuple\ndummy_factors::Tuple\nformula::StatsModels.FormulaTerm\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman-Tuple{Int64}","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"PlackettBurman(factors::Int64) -> PlackettBurman\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman-Tuple{StatsModels.FormulaTerm}","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"PlackettBurman(formula::StatsModels.FormulaTerm) -> PlackettBurman\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.d_criterion-Tuple{Array{Float64,2}}","page":"Public","title":"ExperimentalDesign.d_criterion","text":"d_criterion(model_matrix::Array{Float64,2}) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.expanded_design-Tuple{Int64,Int64}","page":"Public","title":"ExperimentalDesign.expanded_design","text":"expanded_design(factors::Int64, levels::Int64) -> DataFrames.DataFrame\n\n\nGenerates  a design  from all  combinations  of factors  factors and  levels levels.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.explicit_fullfactorial-Tuple{Base.Iterators.ProductIterator}","page":"Public","title":"ExperimentalDesign.explicit_fullfactorial","text":"explicit_fullfactorial(iterator::Base.Iterators.ProductIterator) -> Any\n\n\nReceives  a  Base.Iterators.ProductIterator  and  computes  an  explicit  full factorial design. The generated array is exponentially large.\n\njulia> explicit_fullfactorial(fullfactorial(([-1, 1], [:a, :b, :c])))\n6×2 Array{Any,2}:\n -1  :a\n  1  :a\n -1  :b\n  1  :b\n -1  :c\n  1  :c\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.explicit_fullfactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.explicit_fullfactorial","text":"explicit_fullfactorial(factors::Tuple) -> Any\n\n\nReceives a tuple of arrays  representing categorical factor levels, and computes an explicit full factorial design. The generated array is exponentially large.\n\njulia> explicit_fullfactorial(([-1, 1], [:a, :b, :c], [1, 2]))\n12×3 Array{Any,2}:\n -1  :a  1\n  1  :a  1\n -1  :b  1\n  1  :b  1\n -1  :c  1\n  1  :c  1\n -1  :a  2\n  1  :a  2\n -1  :b  2\n  1  :b  2\n -1  :c  2\n  1  :c  2\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.fullfactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.fullfactorial","text":"fullfactorial(factors::Tuple) -> Base.Iterators.ProductIterator{_1} where _1\n\n\nReceives a tuple of arrays representing categorical factor levels, and returns a Base.Iterators.ProductIterator.   This allows  full  factorial  designs to  be arbitrarily large and  only be computed as needed.  To  compute an explicit full factorial design, use explicit_fullfactorial.\n\njulia> fullfactorial(Tuple([-1, 1] for i = 1:10))\nBase.Iterators.ProductIterator{NTuple{10,Array{Int64,1}}}(([-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1]))\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.isplackettburman-Tuple{Array{Int64,2}}","page":"Public","title":"ExperimentalDesign.isplackettburman","text":"isplackettburman(d::Array{Int64,2}) -> Bool\n\n\nTo check if  a given design is  a Plackett-Burman design, we must check for the following properties, obtained in the original Plackett-Burman paper:\n\nEach component is replicated at each  of its values the same number of times, that is, the sum of elements in each column is zero\nEach  pair of components  occur together at  every combination of  values the same number of times, that is, the sum of each pair of columns will produce a column with the  same number of occurrences  of 2 and -2,  and twice that number of occurrences of 0\n\nPlackett,  R.L. and  Burman, J.P.,  1946. The  design of  optimum multifactorial experiments. Biometrika, 33(4), pp.305-325.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.next_offset_divisible_prime-NTuple{4,Int64}","page":"Public","title":"ExperimentalDesign.next_offset_divisible_prime","text":"next_offset_divisible_prime(n::Int64, offset::Int64, divisor::Int64, tries::Int64) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.optimize_design-Tuple{}","page":"Public","title":"ExperimentalDesign.optimize_design","text":"optimize_design(; factors, levels, experiments, design, candidate_set, iterations, refresh_candidate_set)\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.paley-Tuple{Array{Int64,2}}","page":"Public","title":"ExperimentalDesign.paley","text":"paley(matrix::Array{Int64,2}) -> Array{Int64,2}\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.plackettburman-Tuple{Int64}","page":"Public","title":"ExperimentalDesign.plackettburman","text":"plackettburman(matrix_size::Int64) -> Array{Int64,2}\n\n\nConstructs a Plackett-Burman  design with size matrix_size if  possible, or to the closest, smallest, number for which it is possible.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.random_design-Tuple{Int64,Int64}","page":"Public","title":"ExperimentalDesign.random_design","text":"random_design(factors::Int64, size::Int64) -> DataFrames.DataFrame\n\n\nGenerates a random design of size size with factors numerical factors.\n\n\n\n\n\n","category":"method"},{"location":"#ExperimentalDesign.jl-1","page":"Home","title":"ExperimentalDesign.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for ExperimentalDesign.jl","category":"page"},{"location":"#Library-Outline-1","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"}]
}
